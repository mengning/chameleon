
#include "haha.h"
int bz;
#define MAXLINE 2048
#define PORT  8888
#define u8 unsigned char
u8 line[MAXLINE];
u8 acceptque[7][7];
int acceptsz=0;
int sendingmsg(int sockfd,unsigned char *msg)
{
    if(write(sockfd,msg,7)<0){
        printf("sendingmsg in haha error\n");
        return -1;
    }
    return 0;
}
int recevemsg(int sockfd,char *msg)
{
    char tmp[1024];
    if(read(sockfd,&tmp,1001)<0)
    {
        printf("recvmesage in haha error\n");
        return -1;
    }
    printf("recevemsg in haha with function:%s\n",tmp);
    memset(msg,0,sizeof(msg));
    strncpy(msg,tmp,1001);
    return 0;
}
int closesocket(int sockfd)
{
    close(sockfd);
    return 0;
}
int client(int Port,char *address)
{
    int sock_client = socket(AF_INET,SOCK_STREAM, 0);//sock fd

    struct sockaddr_in addr;

    memset(&addr, 0, sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_port = htons(Port);  //server port

    addr.sin_addr.s_addr = inet_addr(address);  ///server ip address

    if (connect(sock_client, (struct sockaddr *)&addr, sizeof(addr)) < 0)
    {
        perror("connect");
        exit(1);
    }

    printf("sock_client = %d\n",sock_client);

 //   char *req ="message from client\0";
//    sendingmsg(sock_client,req);
    //write(sock_client,req,strlen(req)+1);

    //receive the response from web server
//    char resp[1024];
//    recevemsg(sock_client,resp);
    //    close(sock_client);

    return sock_client;
}


int fd[2];
int fd2[2];
static void init(){
    memset(acceptque,0,sizeof(acceptque));
    acceptsz=-1;
}
static int command(char *resp){
    int idl=4;
    char *ssidname;
    char *auths;
    char *encr;
    char *psw;
    int idr=4;
    while(resp[idr]!='\0'){
        if(resp[idr]=='#')break;
        idr++;
    }
    ssidname=(char *)malloc(sizeof(char)*(idr-idl+2));
    strncpy(ssidname,resp+idl,10);
    
//    printf("idl:%d   idr:%d\n  ssid:%s\n",idl,idr,ssidname);
    
    idl=++idr;
    while(resp[idr]!='\0'){
        if(resp[idr]=='#')break;
        idr++;
    }
    auths=(char *)malloc(sizeof(char)*(idr-idl+2));
    strncpy(auths,resp+idl,(idr-idl));
    
    
    idl=++idr;
    while(resp[idr]!='\0'){
        if(resp[idr]=='#')break;
        idr++;
    }
    encr=(char *)malloc(sizeof(char)*(idr-idl+2));
    strncpy(encr,resp+idl,(idr-idl));
    
    
    idl=++idr;
    while(resp[idr]!='\0'){
        if(resp[idr]=='#')break;
        idr++;
    }
    psw=(char *)malloc(sizeof(char)*(idr-idl+2));
    strncpy(psw,resp+idl,(idr-idl));

    printf("ssidname:%s\n",ssidname);
    printf("auths:%s\n",auths);
    printf("encr:%s\n",encr);
    printf("psw:%s\n",psw);

    Ctrl(ssidname,strlen(ssidname), auths, encr, psw);
    free(ssidname);
    free(auths);
    free(encr);
    free(psw);
    return 0;
}
int readmac(char *line,char *mac,size_t &pos,size_t len){
    int t_len=0;
    while(line[pos]!='#' && pos<len){
        mac[t_len++]=line[pos++];
    }
    if(t_len!=6)return -1; 
}
int main(int argc,char *argv[])
{
    init();
    int n,i,j;
    printf("in haha %d\n",argc);
    //int sockfd=client(PORT,"104.236.139.146");
    int sockfd=client(PORT,"127.0.0.1");

    //from pipe connect hostapd
    if(argc==1){
        fd[0]=atoi(argv[0]);
    }
    char resp[1024];
    while(1){
        memset(line,0,sizeof(line));
        memset(resp,0,sizeof(resp));
        n=read(fd[0],line,300);
        // write(STDOUT_FILENO,line,n);

        //printf("\nchild read %d byte\n",n);
        for(i=0;i<n;i++)
            printf("%02x ",line[i]);
        printf("\n\n");
//        write(fd[0],"YES",3);
        //if(strlen(resp)>2){
        //    memset(resp,0,sizeof(resp));
        //}
        sendingmsg(sockfd,line);
        recevemsg(sockfd,resp);
        printf("recevemsg in haha with while:%s\n\n",resp);
        if(strncmp(resp, "Yes", 3)==0){
            printf("YES\n");
            int inaccept=0;
            if(acceptsz>=0 && acceptsz<=5)
                for(i=0;i<acceptsz;i++){
                    for(j=0;j<6;j++){
                        if(acceptque[i][j]!=line[j])
                            break;
                    }
                    if(j==6){
                        inaccept=1;
                    }
                    //if(strncmp(acceptque[i],line,6)==0){
                    //    inaccept=1;
                    //}
                }
            if(inaccept==0 && acceptsz<5){
                acceptsz++;
                for(j=0;j<6;j++)
                    acceptque[acceptsz][j]=line[j];
                //strncpy(acceptque[acceptsz],line,6);
                if(command(resp)<0)
                    printf("Command Error\n");
                //Ctrl(line,6);
            }
            if(inaccept==0 && acceptsz==5){
                printf("over the maxmium number of new ap");
            }
        }else{
            printf("resp no:%s\n",resp);
        }
    }
    closesocket(sockfd);
    printf("end\n");
}
